#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 12 22:55:26 2020

@author: mangel
"""
import matplotlib.pyplot as plt
import numpy as np
import statistics as stats

def load_data(path):
    data = []
    f = open(path, 'r')
    lines = f.readlines()
    for l in lines:
        data.append(float(l))
    return data

def compute_chi_squared(counts, expected, df):
    result = (counts-expected)**2/expected
    return np.sum(result)

def compute_stats(data):
    mean = stats.mean(data)
    median = stats.median(data)
    deviation = stats.stdev(data,mean)
    maximum = max(data)
    minimum = min(data)
    mode = stats.mode(data)
    
    return dict({"mean": mean, "median": median, "std_dev": deviation, "max": maximum, "min": minimum, "mode": mode})

def compute_spectral_test(data):
    pass

PATH = 'Sequence.txt'
COMPUTE_GRAPHS = False
VERBOSE = True

data = load_data(PATH)

stats = compute_stats(data)

if VERBOSE:
    print(stats)

x = []
y = []

loops = int((len(data) - (len(data) % 2))/2)

for i in range(0, loops):
   x.append(data[i])
   y.append(data[i+1])

if COMPUTE_GRAPHS:
    plt.scatter(x,y)
    plt.show()

#spectral test
#2D
#pairing
    
    
#3D
#make triplets

# Chi squared
BINS = 11
counts, bin_edges = np.histogram(data, bins=BINS)

if COMPUTE_GRAPHS:
    plt.hist(data, bins=BINS)
    plt.plot()

df = len(bin_edges) - 1
expected_values = np.ones(len(counts))*(100000/BINS)

chi_squared_computed = compute_chi_squared(counts, expected_values, df)

sort = sorted(data)

if COMPUTE_GRAPHS:    
    plt.plot(sort)
    plt.show()

#KS test
i_o_n = np.arange(1, BINS+2)/(BINS+1)
D_p = i_o_n - bin_edges

im1_o_n = (np.arange(1, BINS+2)-1)/(BINS+1)
D_m = bin_edges - im1_o_n

D_p_max = max(D_p)
D_m_max = max(D_m)

D = max(D_p_max, D_m_max)